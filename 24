24. Write a C Program to find the maximum size of a file that can be stored in the below file system that uses inodes 
to represent files.
Disk blocks are 8 KB in size, and a pointer to a disk block requires 4 bytes. This file system has 12 direct disk blocks,
as well as single, double,
and triple indirect disk blocks.
 Test Case:
●	 Check that the start blocks and the required contiguous blocks are free. 
●	If free, allocate those blocks to the file. 
●	If not free, find the next available contiguous blocks

sol:

#include <stdio.h>
#include <math.h>

#define BLOCK_SIZE 8192 // 8 KB in bytes
#define POINTER_SIZE 4 // Size of a pointer to a disk block in bytes
#define DIRECT_BLOCKS 12 // Number of direct disk blocks
#define INDIRECT_BLOCKS 256 // Number of disk blocks in single, double, and triple indirect blocks

int main() {
    int max_file_size = 0;
    
    // Calculate maximum file size using direct blocks
    max_file_size += DIRECT_BLOCKS * BLOCK_SIZE;
    
    // Calculate maximum file size using single indirect blocks
    max_file_size += (INDIRECT_BLOCKS * BLOCK_SIZE) / POINTER_SIZE;
    
    // Calculate maximum file size using double indirect blocks
    max_file_size += pow(INDIRECT_BLOCKS, 2) * BLOCK_SIZE / pow(POINTER_SIZE, 2);
    
    // Calculate maximum file size using triple indirect blocks
    max_file_size += pow(INDIRECT_BLOCKS, 3) * BLOCK_SIZE / pow(POINTER_SIZE, 3);
    
    printf("Maximum file size in bytes: %d\n", max_file_size);
    printf("Maximum file size in KB: %d\n", max_file_size / 1024);
    printf("Maximum file size in MB: %d\n", max_file_size / 1024 / 1024);
    
    return 0;
}
output:
Maximum file size in bytes: -2147483648
Maximum file size in KB: -2097152
Maximum file size in MB: -2048
